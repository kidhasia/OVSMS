/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.29
 * Generated at: 2024-10-18 07:35:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<header class=\"site-header\">\r\n");
      out.write("  <nav>\r\n");
      out.write("    <ul>\r\n");
      out.write("      <li><a href=\"homepage.jsp\">Home</a></li>\r\n");
      out.write("      <li><a href=\"AboutUs.jsp\">About Us</a></li>\r\n");
      out.write("      <li><a href=\"feedback.jsp\">Feedback</a></li>\r\n");
      out.write("      <li><a href=\"ContactUs.jsp\">Contact Us</a></li>\r\n");
      out.write("           <a href=\"usersignup.jsp\"><img src=\"images/instagram-people-profile-sets-user-blue-dotted-line-line-icon-free-vector-removebg-preview.png\" style=\"width: 50px;height: 50px;float: right; padding: 2px;\"></a>\r\n");
      out.write("\r\n");
      out.write("    </ul>\r\n");
      out.write("  </nav>\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("@charset \"UTF-8\";\r\n");
      out.write("\r\n");
      out.write("* {\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("header.site-header {\r\n");
      out.write("    background-color: #003366; /* Darker Navy Blue */\r\n");
      out.write("    padding: 20px 0; /* Increased padding for a more spacious look */\r\n");
      out.write("    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("nav ul {\r\n");
      out.write("    list-style-type: none;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between; \r\n");
      out.write("    align-items: center;\r\n");
      out.write("    width: 100%; /* Full width */\r\n");
      out.write("    max-width: 1200px;\r\n");
      out.write("    margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("nav ul li {\r\n");
      out.write("    display: inline;\r\n");
      out.write("    margin: 0; /* Remove any margin that might cause spacing issues */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("nav ul li::before {\r\n");
      out.write("    content: none; /* This will ensure no unwanted markers or symbols appear */\r\n");
      out.write("}\r\n");
      out.write("nav ul li a {\r\n");
      out.write("    color: white;\r\n");
      out.write("    background-color: #004080; /* Dark Navy Blue */\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    padding: 10px 20px; /* Reduced padding */\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    font-size: 16px; /* Smaller font size */\r\n");
      out.write("    display: block;\r\n");
      out.write("    border-radius: 20px; /* Slightly reduced border radius */\r\n");
      out.write("    transition: background-color 0.3s ease, transform 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("nav ul li a:hover {\r\n");
      out.write("    background-color: #0059b3; /* Lighter Navy Blue on hover */\r\n");
      out.write("    transform: scale(1.05);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".seller-btn {\r\n");
      out.write("    background-color: #000; /* Black button */\r\n");
      out.write("    color: white;\r\n");
      out.write("    padding: 10px 25px; /* Smaller padding */\r\n");
      out.write("    font-size: 16px; /* Slightly smaller font size */\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    border-radius: 8px; /* Reduced border radius */\r\n");
      out.write("    border: 2px solid white; \r\n");
      out.write("    transition: background-color 0.3s ease, transform 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".seller-btn:hover {\r\n");
      out.write("    background-color: #333; /* Darker black on hover */\r\n");
      out.write("    transform: scale(1.05);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("@media (max-width: 768px) {\r\n");
      out.write("    nav ul {\r\n");
      out.write("        flex-direction: column;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    nav ul li {\r\n");
      out.write("        margin: 5px 0; /* Space between items in the column layout */\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    nav ul li a {\r\n");
      out.write("        padding: 8px;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .seller-btn {\r\n");
      out.write("        width: 100%; \r\n");
      out.write("        text-align: center;\r\n");
      out.write("        margin-top: 10px;\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("</style>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
